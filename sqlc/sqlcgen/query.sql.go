// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createSignal = `-- name: CreateSignal :exec
INSERT INTO signals(name, wid, src, filter, active) VALUES (?, ?, ?, ?, ?)
`

type CreateSignalParams struct {
	Name   string
	Wid    string
	Src    string
	Filter sql.NullString
	Active bool
}

func (q *Queries) CreateSignal(ctx context.Context, arg CreateSignalParams) error {
	_, err := q.db.ExecContext(ctx, createSignal,
		arg.Name,
		arg.Wid,
		arg.Src,
		arg.Filter,
		arg.Active,
	)
	return err
}

const createWorkflow = `-- name: CreateWorkflow :exec
INSERT INTO workflows(wid, tname) VALUES (?, ?)
`

type CreateWorkflowParams struct {
	Wid   string
	Tname string
}

func (q *Queries) CreateWorkflow(ctx context.Context, arg CreateWorkflowParams) error {
	_, err := q.db.ExecContext(ctx, createWorkflow, arg.Wid, arg.Tname)
	return err
}

const deactivateSignals = `-- name: DeactivateSignals :exec
UPDATE signals SET active = false WHERE wid = ? AND src = ?
`

type DeactivateSignalsParams struct {
	Wid string
	Src string
}

func (q *Queries) DeactivateSignals(ctx context.Context, arg DeactivateSignalsParams) error {
	_, err := q.db.ExecContext(ctx, deactivateSignals, arg.Wid, arg.Src)
	return err
}

const getWorkflow = `-- name: GetWorkflow :one
SELECT wid, tname FROM workflows WHERE wid = ?
`

func (q *Queries) GetWorkflow(ctx context.Context, wid string) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, getWorkflow, wid)
	var i Workflow
	err := row.Scan(&i.Wid, &i.Tname)
	return i, err
}

const listAllSignals = `-- name: ListAllSignals :many
SELECT name, wid, src, "filter", active FROM signals WHERE active = True
`

func (q *Queries) ListAllSignals(ctx context.Context) ([]Signal, error) {
	rows, err := q.db.QueryContext(ctx, listAllSignals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Signal
	for rows.Next() {
		var i Signal
		if err := rows.Scan(
			&i.Name,
			&i.Wid,
			&i.Src,
			&i.Filter,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllWorkflows = `-- name: ListAllWorkflows :many
SELECT wid, tname FROM workflows
`

func (q *Queries) ListAllWorkflows(ctx context.Context) ([]Workflow, error) {
	rows, err := q.db.QueryContext(ctx, listAllWorkflows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workflow
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(&i.Wid, &i.Tname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSignalsForSource = `-- name: ListSignalsForSource :many
SELECT name, wid, src, "filter", active FROM signals WHERE src = ? AND active = True
`

func (q *Queries) ListSignalsForSource(ctx context.Context, src string) ([]Signal, error) {
	rows, err := q.db.QueryContext(ctx, listSignalsForSource, src)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Signal
	for rows.Next() {
		var i Signal
		if err := rows.Scan(
			&i.Name,
			&i.Wid,
			&i.Src,
			&i.Filter,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSignalsForWorkflow = `-- name: ListSignalsForWorkflow :many
SELECT name, wid, src, "filter", active FROM signals WHERE wid = ? AND active = True
`

func (q *Queries) ListSignalsForWorkflow(ctx context.Context, wid string) ([]Signal, error) {
	rows, err := q.db.QueryContext(ctx, listSignalsForWorkflow, wid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Signal
	for rows.Next() {
		var i Signal
		if err := rows.Scan(
			&i.Name,
			&i.Wid,
			&i.Src,
			&i.Filter,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkflows = `-- name: ListWorkflows :many
SELECT wid, tname FROM workflows WHERE tname = ?
`

func (q *Queries) ListWorkflows(ctx context.Context, tname string) ([]Workflow, error) {
	rows, err := q.db.QueryContext(ctx, listWorkflows, tname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workflow
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(&i.Wid, &i.Tname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
